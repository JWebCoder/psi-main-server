"use strict";

require("../lib/envLoader");

var _app = _interopRequireDefault(require("../lib/app"));

var _debug = _interopRequireDefault(require("debug"));

var _http = _interopRequireDefault(require("http"));

require("../lib/tcp");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Module dependencies.
 */
var debug = (0, _debug.default)('raspsi:server');
var params = {
  SERVER_PORT: process.env.SERVER_PORT,
  NOVE_ENV: process.env.NODE_ENV
};
console.log('---------------------------------------------');
console.log('INIT PARAMETERS:\n', params);
console.log('---------------------------------------------');
/**
 * Get port from environment and store in Express.
 */

var app = new _app.default();
var port = normalizePort(process.env.SERVER_PORT || '3000');
app.server.set('port', port);
/**
 * Create HTTP server.
 */

var server = _http.default.createServer(app.server);
/**
 * Listen on provided port, on all network interfaces.
 */


server.on('error', onError);
server.on('listening', onListening);
server.listen(port);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
/**
 * Event listener for HTTP server "error" event.
 */


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port; // handle specific listen errors with friendly messages

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);

    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);

    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2Jpbl9zcmMvd3d3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFSQTs7O0FBVUEsSUFBTSxLQUFLLEdBQUcsb0JBQU0sZUFBTixDQUFkO0FBRUEsSUFBSSxNQUFNLEdBQUc7QUFDWCxFQUFBLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBUixDQUFZLFdBRGQ7QUFFWCxFQUFBLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBUixDQUFZO0FBRlgsQ0FBYjtBQUtBLE9BQU8sQ0FBQyxHQUFSLENBQVksK0NBQVo7QUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLG9CQUFaLEVBQWtDLE1BQWxDO0FBQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSwrQ0FBWjtBQUVBOzs7O0FBSUEsSUFBSSxHQUFHLEdBQUcsSUFBSSxZQUFKLEVBQVY7QUFFQSxJQUFJLElBQUksR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQVIsQ0FBWSxXQUFaLElBQTJCLE1BQTVCLENBQXhCO0FBQ0EsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFYLENBQWUsTUFBZixFQUF1QixJQUF2QjtBQUVBOzs7O0FBSUEsSUFBTSxNQUFNLEdBQUcsY0FBSyxZQUFMLENBQWtCLEdBQUcsQ0FBQyxNQUF0QixDQUFmO0FBRUE7Ozs7O0FBSUEsTUFBTSxDQUFDLEVBQVAsQ0FBVSxPQUFWLEVBQW1CLE9BQW5CO0FBQ0EsTUFBTSxDQUFDLEVBQVAsQ0FBVSxXQUFWLEVBQXVCLFdBQXZCO0FBRUEsTUFBTSxDQUFDLE1BQVAsQ0FBYyxJQUFkO0FBRUE7Ozs7QUFJQSxTQUFTLGFBQVQsQ0FBd0IsR0FBeEIsRUFBcUM7QUFDbkMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUQsRUFBTSxFQUFOLENBQXJCOztBQUVBLE1BQUksS0FBSyxDQUFDLElBQUQsQ0FBVCxFQUFpQjtBQUNmO0FBQ0EsV0FBTyxHQUFQO0FBQ0Q7O0FBRUQsTUFBSSxJQUFJLElBQUksQ0FBWixFQUFlO0FBQ2I7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFPLEtBQVA7QUFDRDtBQUVEOzs7OztBQUlBLFNBQVMsT0FBVCxDQUFrQixLQUFsQixFQUE4QjtBQUM1QixNQUFJLEtBQUssQ0FBQyxPQUFOLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzlCLFVBQU0sS0FBTjtBQUNEOztBQUVELE1BQU0sSUFBSSxHQUFHLE9BQU8sSUFBUCxLQUFnQixRQUFoQixHQUNULFVBQVUsSUFERCxHQUVULFVBQVUsSUFGZCxDQUw0QixDQVM1Qjs7QUFDQSxVQUFRLEtBQUssQ0FBQyxJQUFkO0FBQ0UsU0FBSyxRQUFMO0FBQ0UsTUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLElBQUksR0FBRywrQkFBckI7QUFDQSxNQUFBLE9BQU8sQ0FBQyxJQUFSLENBQWEsQ0FBYjs7QUFDRixTQUFLLFlBQUw7QUFDRSxNQUFBLE9BQU8sQ0FBQyxLQUFSLENBQWMsSUFBSSxHQUFHLG9CQUFyQjtBQUNBLE1BQUEsT0FBTyxDQUFDLElBQVIsQ0FBYSxDQUFiOztBQUNGO0FBQ0UsWUFBTSxLQUFOO0FBUko7QUFVRDtBQUVEOzs7OztBQUlBLFNBQVMsV0FBVCxHQUF3QjtBQUN0QixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsT0FBUCxFQUFiO0FBQ0EsTUFBTSxJQUFJLEdBQUcsT0FBTyxJQUFQLEtBQWdCLFFBQWhCLEdBQ1QsVUFBVSxJQURELEdBRVQsVUFBVSxJQUFJLENBQUMsSUFGbkI7QUFHQSxFQUFBLEtBQUssQ0FBQyxrQkFBa0IsSUFBbkIsQ0FBTDtBQUNEIiwiZmlsZSI6Ind3dyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5pbXBvcnQgJ0Byb290L2VudkxvYWRlcidcbmltcG9ydCBBcHAgZnJvbSAnQHJvb3QvYXBwJ1xuaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJ1xuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCdcbmltcG9ydCAnQHJvb3QvdGNwJ1xuXG5jb25zdCBkZWJ1ZyA9IERlYnVnKCdyYXNwc2k6c2VydmVyJylcblxubGV0IHBhcmFtcyA9IHtcbiAgU0VSVkVSX1BPUlQ6IHByb2Nlc3MuZW52LlNFUlZFUl9QT1JULFxuICBOT1ZFX0VOVjogcHJvY2Vzcy5lbnYuTk9ERV9FTlYsXG59XG5cbmNvbnNvbGUubG9nKCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKVxuY29uc29sZS5sb2coJ0lOSVQgUEFSQU1FVEVSUzpcXG4nLCBwYXJhbXMpXG5jb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJylcblxuLyoqXG4gKiBHZXQgcG9ydCBmcm9tIGVudmlyb25tZW50IGFuZCBzdG9yZSBpbiBFeHByZXNzLlxuICovXG5cbnZhciBhcHAgPSBuZXcgQXBwKClcblxudmFyIHBvcnQgPSBub3JtYWxpemVQb3J0KHByb2Nlc3MuZW52LlNFUlZFUl9QT1JUIHx8ICczMDAwJylcbmFwcC5zZXJ2ZXIuc2V0KCdwb3J0JywgcG9ydClcblxuLyoqXG4gKiBDcmVhdGUgSFRUUCBzZXJ2ZXIuXG4gKi9cblxuY29uc3Qgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwLnNlcnZlcilcblxuLyoqXG4gKiBMaXN0ZW4gb24gcHJvdmlkZWQgcG9ydCwgb24gYWxsIG5ldHdvcmsgaW50ZXJmYWNlcy5cbiAqL1xuXG5zZXJ2ZXIub24oJ2Vycm9yJywgb25FcnJvcilcbnNlcnZlci5vbignbGlzdGVuaW5nJywgb25MaXN0ZW5pbmcpXG5cbnNlcnZlci5saXN0ZW4ocG9ydClcblxuLyoqXG4gKiBOb3JtYWxpemUgYSBwb3J0IGludG8gYSBudW1iZXIsIHN0cmluZywgb3IgZmFsc2UuXG4gKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplUG9ydCAodmFsOiBzdHJpbmcpIHtcbiAgY29uc3QgcG9ydCA9IHBhcnNlSW50KHZhbCwgMTApXG5cbiAgaWYgKGlzTmFOKHBvcnQpKSB7XG4gICAgLy8gbmFtZWQgcGlwZVxuICAgIHJldHVybiB2YWxcbiAgfVxuXG4gIGlmIChwb3J0ID49IDApIHtcbiAgICAvLyBwb3J0IG51bWJlclxuICAgIHJldHVybiBwb3J0XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBFdmVudCBsaXN0ZW5lciBmb3IgSFRUUCBzZXJ2ZXIgXCJlcnJvclwiIGV2ZW50LlxuICovXG5cbmZ1bmN0aW9uIG9uRXJyb3IgKGVycm9yOiBhbnkpIHtcbiAgaWYgKGVycm9yLnN5c2NhbGwgIT09ICdsaXN0ZW4nKSB7XG4gICAgdGhyb3cgZXJyb3JcbiAgfVxuXG4gIGNvbnN0IGJpbmQgPSB0eXBlb2YgcG9ydCA9PT0gJ3N0cmluZydcbiAgICA/ICdQaXBlICcgKyBwb3J0XG4gICAgOiAnUG9ydCAnICsgcG9ydFxuXG4gIC8vIGhhbmRsZSBzcGVjaWZpYyBsaXN0ZW4gZXJyb3JzIHdpdGggZnJpZW5kbHkgbWVzc2FnZXNcbiAgc3dpdGNoIChlcnJvci5jb2RlKSB7XG4gICAgY2FzZSAnRUFDQ0VTJzpcbiAgICAgIGNvbnNvbGUuZXJyb3IoYmluZCArICcgcmVxdWlyZXMgZWxldmF0ZWQgcHJpdmlsZWdlcycpXG4gICAgICBwcm9jZXNzLmV4aXQoMSlcbiAgICBjYXNlICdFQUREUklOVVNFJzpcbiAgICAgIGNvbnNvbGUuZXJyb3IoYmluZCArICcgaXMgYWxyZWFkeSBpbiB1c2UnKVxuICAgICAgcHJvY2Vzcy5leGl0KDEpXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLyoqXG4gKiBFdmVudCBsaXN0ZW5lciBmb3IgSFRUUCBzZXJ2ZXIgXCJsaXN0ZW5pbmdcIiBldmVudC5cbiAqL1xuXG5mdW5jdGlvbiBvbkxpc3RlbmluZyAoKSB7XG4gIGNvbnN0IGFkZHIgPSBzZXJ2ZXIuYWRkcmVzcygpXG4gIGNvbnN0IGJpbmQgPSB0eXBlb2YgYWRkciA9PT0gJ3N0cmluZydcbiAgICA/ICdwaXBlICcgKyBhZGRyXG4gICAgOiAncG9ydCAnICsgYWRkci5wb3J0XG4gIGRlYnVnKCdMaXN0ZW5pbmcgb24gJyArIGJpbmQpXG59XG4iXX0=